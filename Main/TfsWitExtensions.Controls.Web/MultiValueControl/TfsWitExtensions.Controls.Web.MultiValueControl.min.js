TFS.module("TfsWitExtensions.Controls.Web.MultiValueControl", ["TFS.WorkItemTracking.Controls", "TFS.WorkItemTracking", "TFS.Core"], function () { function r(n, t, i) { this.baseConstructor.call(this, n, t, i) } var f = TFS.WorkItemTracking, u = TFS.WorkItemTracking.Controls, t = TFS.Core.delegate, i = TFS.getModuleBase("TfsWitExtensions.Controls.Web.MultiValueControl"), n = TFS.UI.domElem; return r.inherit(u.WorkItemControl, { _control: null, _extendedAllowedValues: null, _sortArray: [], _behavior: null, _init: function () { this._base(); $("<link />").attr("href", i + "jquery.multiselect.css").attr("type", "text/css").attr("rel", "stylesheet").appendTo($("head").first()); $("<link />").attr("href", i + "MultiValueControl.css").attr("type", "text/css").attr("rel", "stylesheet").appendTo($("head").first()); var t = this._options.controlId; this._itemList = $(n("div")).attr("id", "selectedValues-list").appendTo(this._container); this._control = $("<div id='" + t + "_div' style='display: none;'><select id='" + t + "' multiple='multiple'><\/select><\/div><div id='" + t + "_ac' class='combo list text' style='display:none;'><div class='wrap'><input id='" + t + "_ac_inp' style='display:none;' placeholder='Type to search...' /><\/div><\/div>").appendTo(this._container); $(document).ready(function () { $("#" + t).multiselect({ noneSelectedText: "...", selectedList: 2, show: "fade", hide: "explode", header: !1, minWidth: "auto" }); $("#" + t + "_div").hide(); $("#" + t + "_ac_inp").autocomplete({ search: function () { var n = this.value; if (n.length < 2) return !1 }, focus: function () { return !1 } }); var i = $.ui.version === "1.10.2" ? "uiAutocomplete" : "autocomplete", r = $.ui.version === "1.10.2" ? "ui-autocomplete-item" : "item.autocomplete", n = $("#" + t + "_ac_inp").data(i); n._renderItem = function (n, t) { return t.label.substr(0, 1) === "[" && (t.label = t.label.substring(1, t.label.length - 1), t.value = t.label), $("<li class='dropdown-input-listitem'><\/li>").data(r, t).append($("<a class='dropdown-input-listitem-value'><\/a>").text(t.value)).appendTo(n) }; n._renderMenu = function (n, t) { var i = this; $.each(t, function (t, r) { i._renderItem(n, r) }); $(n).addClass("multiValueControl-dropDown") }; $("#" + t + "_ac").hide(); $("#" + t + "_ac .dropdown-input-control").addClass("combo") }) }, bind: function (n) { var a, c, l, o, u; this.base.bind(n); var i = this._options.controlId, f = n.getField(this._fieldName).getValue() || "", r = n.getField(this._fieldName); if (this._behavior = $(r.fieldDefinition.workItemType.form).find('[fieldname="' + r.fieldDefinition.referenceName + '"]').attr("Behavior"), this._behavior && (this._behavior = this._behavior.toLowerCase()), this._behavior === "autocomplete") { var s = $.ui.version === "1.10.2" ? "uiAutocomplete" : "autocomplete", v = $.ui.version === "1.10.2" ? "TFS-Dropdown" : "Dropdown", e = $("#" + i + "_ac_inp").data(s), h = $(r.fieldDefinition.workItemType.form).find('[fieldname="' + r.fieldDefinition.referenceName + '"]').attr("MultiValueDataProvider"); typeof h != "undefined" ? (e.source = function (n, t) { $.getJSON(h, { searchPredicate: n.term }, t) }, e.options.field = this) : (o = this._getExtendedAllowedValues(r), sourceArray = [], $.each(o, function (n, t) { sourceArray.push(t.data) }), e.source = function (n, t) { return filteredArray = $.grep(sourceArray, function (t) { return t.toLowerCase().indexOf(n.term.toLowerCase()) !== -1 }), t(filteredArray) }, e.options.field = this); $("#" + i + "_ac_inp").bind("autocompleteselect", function (n, t) { var r = $("#" + i + "_ac_inp").data(s).options.field, u = t.item.value; return r._onItemSelected.call(r, n, u), !1 }); $("#" + i + "_ac").show(); $("#" + i + "_ac_inp").show(); a = $("#" + i + "_ac"); this._itemList[0].innerHTML = ""; f !== "" && (c = this, l = f.split(";"), this._itemList[0].innerHTML = "", $.each(l, function (n, t) { c._addSelected(t.substr(1, t.length - 2)) })) } else o = this._getExtendedAllowedValues(r), $("#" + i + "_div").show(), u = $("#" + i), u.empty(), $.each(o, function (n, t) { t.data.substr(0, 1) === "[" ? u.append(new Option(t.data.substr(1, t.data.length - 2), t.data, !1, f.indexOf(t.data) >= 0)) : u.append(new Option(t.data, t.data, !1, f.indexOf(t.data) >= 0)) }), u.multiselect("refresh"), this._control.bind("change", t(this, this._onChange)) }, unbind: function () { var i = this._options.controlId, n; this._behavior !== "autocomplete" && (n = $("#" + i), this._control.unbind("change", t(this, this._onChange)), n.empty()) }, invalidate: function () { if (this._behavior !== "autocomplete") { var t = this._getField().getValue() || "", i = this._getExtendedAllowedValues(this._getField()), r = this._options.controlId, n = $("#" + r); n.empty(); $.each(i, function (i, r) { n.append(new Option(r.substr(1, r.length - 2), r, !1, t.indexOf(r) >= 0)) }); n.multiselect("refresh") } }, clear: function () { this._control.empty() }, _onChange: function () { var t = this._options.controlId, n = $("#" + t + " :selected").map(function () { return $(this).val() }).get(); n.length === 0 ? this._getField().setValue("") : this._getField().setValue("[" + n.join("];[") + "]") }, _onItemSelected: function (n, t) { var r = $.ui.version === "1.10.2" ? "TFS-Dropdown" : "Dropdown", u = $("#" + this._options.controlId + "_ac"), f = u.data(r), i; this._getField().getValue().indexOf("[" + t + "]") === -1 && (this._addSelected(t), i = this._itemList.find(".selected-value").map(function () { return $(this).attr("title") }).get(), this._getField().setValue(i.join(";"))); $("#" + this._options.controlId + "_ac_inp").val("") }, _addSelected: function (t) { var i, r; i = $(n("div")).addClass("selected-value"); r = $(n("span")).appendTo(i).addClass("selected-value-name").text(t); this._drawRemoveElement(i); $('<input type="hidden" />').appendTo(i).attr("id", "tfid").val(t); i.attr("title", "[" + t + "]"); this._itemList.append(i) }, _drawRemoveElement: function (r) { $(n("img")).appendTo(r).addClass("icon").attr("id", "remove-action").attr("src", i + "MultiValueControl16x16.png").click(t(this, this._onItemRemoved)).accessible() }, _onItemRemoved: function (n) { var t, r, u, i; return t = $(n.target).closest(".selected-value"), r = t.find("#tfid").val(), u = t.find(".selected-value-name").text(), this._removeValue(t), i = this._itemList.find(".selected-value").map(function () { return $(this).attr("title") }).get(), this._getField().setValue(i.join(";")), !1 }, _removeValue: function (n) { var t, i = n.find("#tfid").val(); t = i ? n.find(".selected-value-name").text() : n.find("#username").val(); n.remove() }, _getExtendedAllowedValues: function (n) { var r = n.getAllowedValues(), t = [], i; return $.each(r, function (n, i) { var r = i.substr(1, i.length - 2); t.push({ data: r, text: r, value: r }) }), i = $(n.fieldDefinition.workItemType.form).find('[fieldname="' + n.fieldDefinition.referenceName + '"]').attr("MultiValueDataProvider"), typeof i != "undefined" && i !== "" && $.ajax({ type: "GET", dataType: "json", async: !1, url: i, success: function (n) { $.each(n, function (n, i) { if ($.inArray(i, t) === -1) { var r = i.substr(1, i.length - 2); t.push({ data: r, text: r, value: r }) } }) } }), t.sort(function (n, t) { var i = n.data.toLowerCase(), r = t.data.toLowerCase(); return i < r ? -1 : i > r ? 1 : 0 }), t } }), u.registerWorkItemControl("MultiValueControl", r), { MultiValueControl: r } }), function (n) { var t = 0; n.widget("ech.multiselect", { options: { header: !0, height: 175, minWidth: 225, classes: "", checkAllText: "Check all", uncheckAllText: "Uncheck all", noneSelectedText: "Select options", selectedText: "# selected", selectedList: 0, show: null, hide: null, autoOpen: !1, multiple: !0, position: {} }, _create: function () { var i = this.element.hide(), t = this.options; this.speed = n.fx.speeds._default; this._isOpen = !1; var u = (this.button = n('<button type="button"><span class="ui-icon ui-icon-triangle-2-n-s"><\/span><\/button>')).addClass("ui-multiselect ui-widget ui-state-default ui-corner-all").addClass(t.classes).attr({ title: i.attr("title"), "aria-haspopup": !0, tabIndex: i.attr("tabIndex") }).insertAfter(i), e = (this.buttonlabel = n("<span />")).html(t.noneSelectedText).appendTo(u), r = (this.menu = n("<div />")).addClass("ui-multiselect-menu ui-widget ui-widget-content ui-corner-all").addClass(t.classes).appendTo(document.body), f = (this.header = n("<div />")).addClass("ui-widget-header ui-corner-all ui-multiselect-header ui-helper-clearfix").appendTo(r), o = (this.headerLinkContainer = n("<ul />")).addClass("ui-helper-reset").html(function () { return t.header === !0 ? '<li><a class="ui-multiselect-all" href="#"><span class="ui-icon ui-icon-check"><\/span><span>' + t.checkAllText + '<\/span><\/a><\/li><li><a class="ui-multiselect-none" href="#"><span class="ui-icon ui-icon-closethick"><\/span><span>' + t.uncheckAllText + "<\/span><\/a><\/li>" : typeof t.header == "string" ? "<li>" + t.header + "<\/li>" : "" }).append('<li class="ui-multiselect-close"><a href="#" class="ui-multiselect-close"><span class="ui-icon ui-icon-circle-close"><\/span><\/a><\/li>').appendTo(f), s = (this.checkboxContainer = n("<ul />")).addClass("ui-multiselect-checkboxes ui-helper-reset").appendTo(r); this._bindEvents(); this.refresh(!0); t.multiple || r.addClass("ui-multiselect-single") }, _init: function () { this.options.header === !1 && this.header.hide(); this.options.multiple || this.headerLinkContainer.find(".ui-multiselect-all, .ui-multiselect-none").hide(); this.options.autoOpen && this.open(); this.element.is(":disabled") && this.disable() }, refresh: function (i) { var u = this.element, f = this.options, s = this.menu, h = this.checkboxContainer, e = [], r = "", o = u.attr("id") || t++; u.find("option").each(function (t) { var w = n(this), u = this.parentNode, c = this.innerHTML, v = this.title, y = this.value, l = "ui-multiselect-" + (this.id || o + "-option-" + t), s = this.disabled, a = this.selected, h = ["ui-corner-all"], p = (s ? "ui-multiselect-disabled " : " ") + this.className, i; u.tagName === "OPTGROUP" && (i = u.getAttribute("label"), n.inArray(i, e) === -1 && (r += '<li class="ui-multiselect-optgroup-label ' + u.className + '"><a href="#">' + i + "<\/a><\/li>", e.push(i))); s && h.push("ui-state-disabled"); a && !f.multiple && h.push("ui-state-active"); r += '<li class="' + p + '">'; r += '<label for="' + l + '" title="' + v + '" class="' + h.join(" ") + '">'; r += '<input id="' + l + '" name="multiselect_' + o + '" type="' + (f.multiple ? "checkbox" : "radio") + '" value="' + y + '" title="' + c + '"'; a && (r += ' checked="checked"', r += ' aria-selected="true"'); s && (r += ' disabled="disabled"', r += ' aria-disabled="true"'); r += " /><span>" + c + "<\/span><\/label><\/li>" }); h.html(r); this.labels = s.find("label"); this.inputs = this.labels.children("input"); this._setButtonWidth(); this._setMenuWidth(); this.button[0].defaultValue = this.update(); i || this._trigger("refresh") }, update: function () { var t = this.options, r = this.inputs, u = r.filter(":checked"), i = u.length, f; return f = i === 0 ? t.noneSelectedText : n.isFunction(t.selectedText) ? t.selectedText.call(this, i, r.length, u.get()) : /\d/.test(t.selectedList) && t.selectedList > 0 && i <= t.selectedList ? u.map(function () { return n(this).next().html() }).get().join(", ") : t.selectedText.replace("#", i).replace("#", r.length), this.buttonlabel.html(f), f }, _bindEvents: function () { function r() { return t[t._isOpen ? "close" : "open"](), !1 } var t = this, i = this.button; i.find("span").bind("click.multiselect", r); i.bind({ click: r, keypress: function (n) { switch (n.which) { case 27: case 38: case 37: t.close(); break; case 39: case 40: t.open() } }, mouseenter: function () { i.hasClass("ui-state-disabled") || n(this).addClass("ui-state-hover") }, mouseleave: function () { n(this).removeClass("ui-state-hover") }, focus: function () { i.hasClass("ui-state-disabled") || n(this).addClass("ui-state-focus") }, blur: function () { n(this).removeClass("ui-state-focus") } }); this.header.delegate("a", "click.multiselect", function (i) { n(this).hasClass("ui-multiselect-close") ? t.close() : t[n(this).hasClass("ui-multiselect-all") ? "checkAll" : "uncheckAll"](); i.preventDefault() }); this.menu.delegate("li.ui-multiselect-optgroup-label a", "click.multiselect", function (i) { i.preventDefault(); var f = n(this), r = f.parent().nextUntil("li.ui-multiselect-optgroup-label").find("input:visible:not(:disabled)"), u = r.get(), e = f.parent().text(); t._trigger("beforeoptgrouptoggle", i, { inputs: u, label: e }) !== !1 && (t._toggleChecked(r.filter(":checked").length !== r.length, r), t._trigger("optgrouptoggle", i, { inputs: u, label: e, checked: u[0].checked })) }).delegate("label", "mouseenter.multiselect", function () { n(this).hasClass("ui-state-disabled") || (t.labels.removeClass("ui-state-hover"), n(this).addClass("ui-state-hover").find("input").focus()) }).delegate("label", "keydown.multiselect", function (i) { i.preventDefault(); switch (i.which) { case 9: case 27: t.close(); break; case 38: case 40: case 37: case 39: t._traverse(i.which, this); break; case 13: n(this).find("input")[0].click() } }).delegate('input[type="checkbox"], input[type="radio"]', "click.multiselect", function (i) { var u = n(this), f = this.value, r = this.checked, e = t.element.find("option"); if (this.disabled || t._trigger("click", i, { value: f, text: this.title, checked: r }) === !1) { i.preventDefault(); return } u.focus(); u.attr("aria-selected", r); e.each(function () { this.value === f ? this.selected = r : t.options.multiple || (this.selected = !1) }); t.options.multiple || (t.labels.removeClass("ui-state-active"), u.closest("label").toggleClass("ui-state-active", r), t.close()); t.element.trigger("change"); setTimeout(n.proxy(t.update, t), 10) }); n(document).bind("mousedown.multiselect", function (i) { !t._isOpen || n.contains(t.menu[0], i.target) || n.contains(t.button[0], i.target) || i.target === t.button[0] || t.close() }); n(this.element[0].form).bind("reset.multiselect", function () { setTimeout(n.proxy(t.refresh, t), 10) }) }, _setButtonWidth: function () { var t = this.element.outerWidth(), n = this.options; /\d/.test(n.minWidth) && t < n.minWidth && (t = n.minWidth); this.button.width("100%") }, _setMenuWidth: function () { var n = this.menu, t = this.button.outerWidth() - parseInt(n.css("padding-left"), 10) - parseInt(n.css("padding-right"), 10) - parseInt(n.css("border-right-width"), 10) - parseInt(n.css("border-left-width"), 10); n.width(t || this.button.outerWidth()) }, _traverse: function (t, i) { var e = n(i), r = t === 38 || t === 37, f = e.parent()[r ? "prevAll" : "nextAll"]("li:not(.ui-multiselect-disabled, .ui-multiselect-optgroup-label)")[r ? "last" : "first"](), u; f.length ? f.find("label").trigger("mouseover") : (u = this.menu.find("ul").last(), this.menu.find("label")[r ? "last" : "first"]().trigger("mouseover"), u.scrollTop(r ? u.height() : 0)) }, _toggleState: function (n, t) { return function () { this.disabled || (this[n] = t); t ? this.setAttribute("aria-selected", !0) : this.removeAttribute("aria-selected") } }, _toggleChecked: function (t, i) { var r = i && i.length ? i : this.inputs, f = this, u; r.each(this._toggleState("checked", t)); r.eq(0).focus(); this.update(); u = r.map(function () { return this.value }).get(); this.element.find("option").each(function () { !this.disabled && n.inArray(this.value, u) > -1 && f._toggleState("selected", t).call(this) }); r.length && this.element.trigger("change") }, _toggleDisabled: function (t) { this.button.attr({ disabled: t, "aria-disabled": t })[t ? "addClass" : "removeClass"]("ui-state-disabled"); var i = this.menu.find("input"), r = "ech-multiselect-disabled"; i = t ? i.filter(":enabled").data(r, !0) : i.filter(function () { return n.data(this, r) === !0 }).removeData(r); i.attr({ disabled: t, "arial-disabled": t }).parent()[t ? "addClass" : "removeClass"]("ui-state-disabled"); this.element.attr({ disabled: t, "aria-disabled": t }) }, open: function () { var s = this, i = this.button, r = this.menu, f = this.speed, t = this.options, e = []; if (this._trigger("beforeopen") !== !1 && !i.hasClass("ui-state-disabled") && !this._isOpen) { var h = r.find("ul").last(), u = t.show, o = i.offset(); n.isArray(t.show) && (u = t.show[0], f = t.show[1] || s.speed); u && (e = [u, f]); h.scrollTop(0).height(t.height); n.ui.position && !n.isEmptyObject(t.position) ? (t.position.of = t.position.of || i, r.show().position(t.position).hide()) : r.css({ top: o.top + i.outerHeight(), left: o.left }); n.fn.show.apply(r, e); this.labels.eq(0).trigger("mouseover").trigger("mouseenter").find("input").trigger("focus"); i.addClass("ui-state-active"); this._isOpen = !0; this._trigger("open") } }, close: function () { if (this._trigger("beforeclose") !== !1) { var t = this.options, i = t.hide, r = this.speed, u = []; n.isArray(t.hide) && (i = t.hide[0], r = t.hide[1] || this.speed); i && (u = [i, r]); n.fn.hide.apply(this.menu, u); this.button.removeClass("ui-state-active").trigger("blur").trigger("mouseleave"); this._isOpen = !1; this._trigger("close") } }, enable: function () { this._toggleDisabled(!1) }, disable: function () { this._toggleDisabled(!0) }, checkAll: function () { this._toggleChecked(!0); this._trigger("checkAll") }, uncheckAll: function () { this._toggleChecked(!1); this._trigger("uncheckAll") }, getChecked: function () { return this.menu.find("input").filter(":checked") }, destroy: function () { return n.Widget.prototype.destroy.call(this), this.button.remove(), this.menu.remove(), this.element.show(), this }, isOpen: function () { return this._isOpen }, widget: function () { return this.menu }, getButton: function () { return this.button }, _setOption: function (t, i) { var r = this.menu; switch (t) { case "header": r.find("div.ui-multiselect-header")[i ? "show" : "hide"](); break; case "checkAllText": r.find("a.ui-multiselect-all span").eq(-1).text(i); break; case "uncheckAllText": r.find("a.ui-multiselect-none span").eq(-1).text(i); break; case "height": r.find("ul").last().height(parseInt(i, 10)); break; case "minWidth": this.options[t] = parseInt(i, 10); this._setButtonWidth(); this._setMenuWidth(); break; case "selectedText": case "selectedList": case "noneSelectedText": this.options[t] = i; this.update(); break; case "classes": r.add(this.button).removeClass(this.options.classes).addClass(i); break; case "multiple": r.toggleClass("ui-multiselect-single", !i); this.options.multiple = i; this.element[0].multiple = i; this.refresh() } n.Widget.prototype._setOption.apply(this, arguments) } }) }(jQuery);
/*
//# sourceMappingURL=TfsWitExtensions.Controls.Web.MultiValueControl.min.js.map
*/